{"version":3,"sources":["components/InfoBox.js","components/Map.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","props","sa","cb","lat","lon","Map","state","viewport","height","width","latitude","longitude","zoom","links","selectedLink","userLocation","fetch","then","res","json","setState","setSelectedLink","e","console","log","this","street_address","council_district","Button","style","position","top","left","zIndex","onClick","navigator","geolocation","getCurrentPosition","setUserLocation","coords","long","newViewport","src","mapboxApiAccessToken","process","onViewportChange","map","park","key","cb_link_id","parseFloat","className","preventDefault","alt","Object","keys","length","onClose","community_board","Component","popUp","show","handleClose","variant","Modal","onHide","Header","closeButton","Title","Body","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.afa95ba0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n/*\r\nclass InfoBox extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n             {`lat: ${1}\r\n               lon: ${2}\r\n               communityBoard: ${3}\r\n              `\r\n            }  \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default InfoBox;\r\n**/\r\n\r\nconst InfoBox = ( props ) => {\r\n\r\n    return (\r\n        <div>\r\n                <div>{`Link Address: ${props.sa}`}</div>\r\n                <div>{`community board: ${props.cb}`}</div>\r\n                <div>{`lat: ${props.lat}`}</div>\r\n                <div>{`lon: ${props.lon}`}</div>    \r\n        </div>\r\n     \r\n    )\r\n};\r\n\r\nexport default InfoBox;","import React, {Component} from 'react';\r\nimport ReactMapGL, { Marker, Popup }  from 'react-map-gl';\r\nimport './Map.css'\r\nimport InfoBox from './InfoBox';\r\nimport {Button, Form, Label, Input, Modal, ModalBody} from 'react-bootstrap';\r\n\r\n//import classes from './mapbox-gl.css'\r\n//const my_data = require('../data/test.json');\r\n\r\nclass Map extends Component {\r\n\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewport: {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        latitude: 40.7128,\r\n        longitude: -74.0060,\r\n        zoom: 10\r\n      },\r\n      links: [],\r\n      selectedLink:null,\r\n      userLocation: {}\r\n    };\r\n  }\r\n  \r\n\r\n  componentDidMount() {\r\n    fetch('https://data.cityofnewyork.us/resource/s4kf-3yrf.json')\r\n      .then(res=> res.json())\r\n      .then(res=> \r\n          //console.log(json)\r\n          this.setState({links:res})\r\n      );\r\n  }\r\n\r\n  render() {\r\n    \r\n    //function to set user location \r\n    const setUserLocation = () => {\r\n      console.log(\"attempting to get user location ...\")\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        let setUserLocation = {\r\n            lat: position.coords.latitude,\r\n            long: position.coords.longitude\r\n         };\r\n        let newViewport = {\r\n           height: \"100vh\",\r\n           width: \"100vw\",\r\n           latitude: position.coords.latitude,\r\n           longitude: position.coords.longitude,\r\n           zoom: 14\r\n         };\r\n         this.setState({\r\n           viewport: newViewport,\r\n           userLocation: setUserLocation\r\n        });\r\n     });\r\n    }\r\n\r\n    //function to select the link for the popup\r\n    const setSelectedLink = (e) => {\r\n      console.log('clicked')\r\n      this.setState({selectedLink:e})\r\n    }\r\n\r\n    console.log(this.state.userLocation);\r\n    \r\n    const userLocStyle = {\r\n      width:20,\r\n      height:20,\r\n      position:'absolute',\r\n      top:\"30%\",\r\n      left:\"5%\",\r\n      zIndex:10\r\n    };\r\n\r\n    const userImgStyle = {\r\n      width:20,\r\n      height:20,\r\n      position:'absolute',\r\n      top:\"0%\",\r\n      left:\"5%\",\r\n      zIndex:10\r\n    };\r\n\r\n    return (\r\n     \r\n    <div>\r\n      <InfoBox \r\n               sa={!this.state.selectedLink ? \"\" : this.state.selectedLink.street_address}\r\n               cb={!this.state.selectedLink ? \"\" : this.state.selectedLink.council_district}\r\n               lat={!this.state.selectedLink ? \"\" : this.state.selectedLink.latitude}\r\n               lon={!this.state.selectedLink ? \"\" : this.state.selectedLink.longitude}\r\n                />\r\n      <Button style={userLocStyle} onClick={setUserLocation}>\r\n      <img style={userImgStyle} src=\"https://img.icons8.com/material-outlined/24/000000/location-off.png\"/>\r\n      </Button> \r\n      <ReactMapGL\r\n        {...this.state.viewport}\r\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n        onViewportChange={(viewport) => this.setState({viewport})}\r\n      >\r\n      {this.state.links.map(park => (\r\n          <Marker\r\n            key = {park.cb_link_id}\r\n            latitude={parseFloat(park.latitude)}\r\n            longitude={parseFloat(park.longitude)}\r\n          >\r\n            <button \r\n             className=\"marker_btt\"\r\n             onClick={e => {\r\n              e.preventDefault();\r\n              setSelectedLink(park);\r\n              console.log(this.state.selectedLink);\r\n            }}\r\n             >\r\n                <img width={10} height={10} src=\"https://img.icons8.com/android/24/000000/computer.png\" alt = \"linknyc\"/>\r\n            </button>\r\n          </Marker>\r\n        ))}\r\n         {Object.keys(this.state.userLocation).length !== 0 ? (\r\n              <Marker\r\n                latitude={this.state.userLocation.lat}\r\n                longitude={this.state.userLocation.long}\r\n              >\r\n               <img width={20} height={20}  src=\"https://img.icons8.com/plasticine/100/000000/worldwide-location.png\" alt = \"user_location\"/>\r\n              </Marker>\r\n              ) : ( \r\n              <div></div>\r\n            )}\r\n            \r\n        {this.state.selectedLink ? (\r\n          <Popup\r\n            latitude={parseFloat(this.state.selectedLink.latitude)}\r\n            longitude={parseFloat(this.state.selectedLink.longitude)}\r\n            onClose={() => {\r\n              setSelectedLink(null);\r\n            }}\r\n          >\r\n          <div>\r\n              <p>{this.state.selectedLink.street_address}</p>\r\n              <p>{this.state.selectedLink.community_board}</p>\r\n              <p>{this.state.selectedLink.council_district}</p>\r\n              <p>{this.state.selectedLink.latitude}</p>\r\n              <p>{this.state.selectedLink.longitude}</p>\r\n            </div>\r\n          </Popup>\r\n        ) : null}\r\n        </ReactMapGL>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n\r\n//extras\r\n/**\r\n * \r\n *     navigator.geolocation.getCurrentPosition(position => {\r\n         let setUserLocation = {\r\n             lat: position.coords.latitude,\r\n             long: position.coords.longitude\r\n          };\r\n         let newViewport = {\r\n            height: \"100vh\",\r\n            width: \"100vw\",\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude,\r\n            zoom: 10\r\n          };\r\n          this.setState({\r\n            viewport: newViewport,\r\n            userLocation: setUserLocation\r\n         });\r\n      });\r\n * \r\n * \r\n * \r\n * {Object.keys(this.state.userLocation).length !== 0 ? (\r\n              <Marker\r\n                latitude={this.state.userLocation.lat}\r\n                longitude={this.state.userLocation.long}\r\n              >\r\n               <img src=\"https://img.icons8.com/plasticine/100/000000/worldwide-location.png\"/>\r\n              </Marker>\r\n              ) : ( \r\n              <div>Empty</div>\r\n            )}\r\n * \r\n * \r\n * <div>\r\n              <h2>{this.state.selectedLink.community_board}</h2>\r\n              <p>{this.state.selectedLink.council_district}</p>\r\n            </div>\r\n *  {this.state.selectedLink ? console.log(this.state.selectedLink): console.log('not filled')}\r\n * {this.state.selectedLink ? (\r\n          <Popup\r\n            latitude={this.state.selectedLink.latitude}\r\n            longitude={this.state.selectedLink.longitude}\r\n            onClose={() => {\r\n              setSelectedLink(null);\r\n            }}\r\n          >\r\n            <div>\r\n              <h2>{this.state.selectedLink.community_board}</h2>\r\n              <p>{this.state.selectedLink.council_district}</p>\r\n            </div>\r\n          </Popup>\r\n        ) : null}\r\n * \r\n * \r\n * \r\n * \r\n *  {my_data.map(park => (\r\n          console.log(park.latitude + park.longitude)\r\n        ))}\r\n \r\n       {this.props.links.map(park => (\r\n          <Marker\r\n            key = {park.cb_link_id}\r\n            latitude={parseFloat(park.latitude)}\r\n            longitude={parseFloat(park.longitude)}\r\n          >\r\n            <button \r\n             className=\"marker_btt\"\r\n             >\r\n                <img width={10} height={10} src=\"https://img.icons8.com/android/24/000000/computer.png\" alt = \"linknyc\"/>\r\n            </button>\r\n          </Marker>\r\n        ))}\r\n \r\n \r\n\r\nconst Map = (props) => {\r\n  return (\r\n     \r\n    <div>\r\n      <ReactMapGL\r\n        {...props.viewport}\r\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n        onViewportChange={(viewport) => this.setState({viewport})}\r\n      >\r\n\r\n       \r\n        </ReactMapGL>\r\n    </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Map;\r\n\r\n\r\n\r\n\r\n        */\r\n\r\n\r\n\r\n\r\n\r\n ","import React, { Component } from 'react';\r\nimport {Button, Form, Label, Input, Modal, ModalBody} from 'react-bootstrap';\r\n\r\nclass popUp extends Component {\r\n\r\n  state = { show: false };\r\n\r\n  render() {\r\n\r\n    const handleShow = () => {\r\n      console.log('attempting to show modal')\r\n      this.setState({ show: true });\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      this.setState({ show: false });\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Button variant=\"primary\" onClick={handleShow}>\r\n        Info\r\n      </Button>\r\n\r\n      <Modal show={this.state.show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>NYC-Link</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div>\r\n            NYC-Link was built to help you find linkNYC stations near you.\r\n            Use the map interface to search for a location near you.\r\n          </div>\r\n          <br></br>\r\n           <div>\r\n            <b>Coming soon:</b> NYC-Link \r\n            allows you to route to the nearest station as well. More features \r\n            coming soon.\r\n           </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>  \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default popUp;\r\n\r\n/**\r\n * <Modal show={false} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal heading</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n * \r\n */","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Map from './components/Map';\nimport Modal from './components/Modal'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div><Modal/></div>\n      <Map/>\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}