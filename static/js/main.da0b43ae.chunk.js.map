{"version":3,"sources":["components/Map.js","components/InfoBox.js","components/Modal.js","components/Match.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","setUserLocation","console","log","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","long","longitude","newViewport","height","width","zoom","setState","viewport","userLocation","setSelectedLink","e","selectedLink","showInfo","handleInputChange","event","preventDefault","target","value","length","searchInput","updateMatches","showMatches","matches","handleSubmit","displayMatches","findMatches","wordToMatch","my_obj","filter","place","regex","RegExp","street_address","match","newStateMatches","state","links","map","alertClicked","address","arr","eval","searchLink","fetch","then","res","json","markerStyle","display","borderRadius","borderWidth","borderColor","border","padding","boxShadow","backgroundImage","MapStyles","style","this","mapboxApiAccessToken","process","onViewportChange","park","key","cb_link_id","parseFloat","className","onClick","Object","keys","src","alt","onClose","community_board","council_district","bind","myValue","marginTop","right","zIndex","backgroundColor","link_id","sa","cb","lon","Component","InfoBox","BackgroundColor","defaultActiveKey","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","toLowerCase","popUp","show","handleClose","onHide","closeButton","Title","Footer","ListGroup","Item","action","float","Search","marginLeft","placeholder","onChange","Match","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da0b43ae.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport ReactMapGL, { Marker, Popup }  from 'react-map-gl';\r\nimport './Map.css'\r\nimport InfoBox from './InfoBox';\r\nimport { Button } from 'react-bootstrap';\r\nimport Search from './Search';\r\n//import Match from './Match';\r\nimport Modal from './Modal';\r\n\r\n//import classes from './mapbox-gl.css'\r\n//const my_data = require('../data/test.json');\r\n\r\nclass Map extends Component {\r\n\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewport: {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        latitude: 40.7128,\r\n        longitude: -74.0060,\r\n        zoom: 10\r\n      },\r\n      links: [],\r\n      selectedLink:null,\r\n      userLocation: {},\r\n      searchInput: \"\",\r\n      showMatches: false,\r\n      matches: [],\r\n      searchLink: [],\r\n      showInfo: false\r\n    };\r\n  }\r\n  \r\n\r\n  componentDidMount() {\r\n    fetch('https://data.cityofnewyork.us/resource/s4kf-3yrf.json')\r\n      .then(res=> res.json())\r\n      .then(res=> \r\n          //console.log(json)\r\n          this.setState({links:res})\r\n      );\r\n  }\r\n\r\n //function to set user location \r\nsetUserLocation = () => {\r\n  console.log(\"attempting to get user location ...\")\r\n  navigator.geolocation.getCurrentPosition(position => {\r\n    let setUserLocation = {\r\n        lat: position.coords.latitude,\r\n        long: position.coords.longitude\r\n     };\r\n    let newViewport = {\r\n       height: \"100vh\",\r\n       width: \"100vw\",\r\n       latitude: position.coords.latitude,\r\n       longitude: position.coords.longitude,\r\n       zoom: 14\r\n     };\r\n     this.setState({\r\n       viewport: newViewport,\r\n       userLocation: setUserLocation\r\n    });\r\n });\r\n}\r\n\r\n//function to select the link for the popup\r\n    setSelectedLink = (e) => {\r\n      //console.log('clicked')\r\n      this.setState({selectedLink:e, showInfo:true})\r\n    }\r\n\r\n    //****************child functions */\r\n\r\n    handleInputChange = (event) => {\r\n      event.preventDefault()\r\n      console.log(event.target.value)\r\n      if (event.target.value.length === 0) {\r\n        this.setState({searchInput: \"\", showMatches: false, matches: [] })\r\n        return\r\n    }\r\n        this.setState({searchInput: event.target.value })\r\n        this.updateMatches()  \r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      this.displayMatches();\r\n    }\r\n\r\n    findMatches = (wordToMatch, my_obj) => {\r\n        return my_obj.filter(place => {\r\n        // here we need to figure out the matches\r\n        const regex = new RegExp(wordToMatch, 'gi');\r\n        //console.log(place.street_address.match(regex))\r\n        return place.street_address.match(regex)\r\n      });\r\n    }\r\n\r\n    updateMatches =() => {\r\n      const matchArray = this.findMatches(this.state.searchInput, this.state.links);\r\n      const newStateMatches = matchArray.map(place => {\r\n        //console.log(place.street_address);\r\n        return place \r\n      });\r\n      this.setState({matches:newStateMatches})\r\n      \r\n    }\r\n\r\n    alertClicked = address => {\r\n      let arr = eval(address.target.value);\r\n      console.log(arr[0])\r\n      let newViewport = {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        latitude: arr[0],\r\n        longitude: arr[1],\r\n        zoom: 14\r\n      }\r\n      this.setState({searchLink: address});\r\n      this.setState({viewport: newViewport});\r\n      this.setState({matches: []})\r\n    }\r\n\r\n\r\n  render() {\r\n    \r\n    const markerStyle = {\r\n      height:\"20px\",\r\n      width:\"20px\",\r\n      display:\"block\",\r\n      borderRadius: \"30%\",\r\n      borderWidth: \"thin\",\r\n      borderColor: \"white\",\r\n      border: \"1px solid\",\r\n      padding: \"15px\",\r\n      boxShadow: \"1px 1px 1px #888888\",\r\n      backgroundImage: 'url(\"https://img.icons8.com/ios-glyphs/30/000000/billboard.png\")'\r\n    };\r\n\r\n    \r\n    const modalLocStyle = {\r\n      width:20,\r\n      height:20,\r\n      position:'absolute',\r\n      marginTop:\"85%\",\r\n      right:\"10%\",\r\n      zIndex:10\r\n    };\r\n\r\n\r\n    const userLocStyle = {\r\n      width:20,\r\n      height:20,\r\n      position:'absolute',\r\n      marginTop:\"100%\",\r\n      right:\"10%\",\r\n      zIndex:10\r\n    };\r\n\r\n    const userBtnStyle = {\r\n      display:\"block\",\r\n      backgroundColor:\"white\",\r\n      borderRadius: \"40%\"\r\n      ,borderWidth: \"thin\",\r\n      borderColor: \"white\",\r\n      border: \"1px solid\",\r\n      padding: \"10px\",\r\n      boxShadow: \"1px 1px 1px #888888\"\r\n    }\r\n\r\n    /**\r\n    const userImgStyle = {\r\n      width:20,\r\n      height:20,\r\n      position:'absolute',\r\n      top:\"0%\",\r\n      left:\"5%\",\r\n      zIndex:10\r\n    };\r\n     */\r\n\r\n    const InfoStyles = {\r\n        marginTop: \"70px\"\r\n    }\r\n\r\n    const MapStyles = {\r\n      position: \"relative\"\r\n    }\r\n\r\n    //render matches to search bar \r\n    return (\r\n     \r\n    <div>\r\n    <div>\r\n      <ReactMapGL\r\n        style = {MapStyles}\r\n        {...this.state.viewport}\r\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n        onViewportChange={(viewport) => this.setState({viewport})}\r\n      >\r\n      {this.state.links.map(park => (\r\n          <Marker\r\n            key = {park.cb_link_id}\r\n            latitude={parseFloat(park.latitude)}\r\n            longitude={parseFloat(park.longitude)}\r\n          >\r\n            <button \r\n              style={markerStyle}\r\n              className=\"marker_btt\"\r\n              onClick={e => {\r\n              e.preventDefault();\r\n              this.setSelectedLink(park);\r\n            }}\r\n             >\r\n            </button>\r\n          </Marker>\r\n        ))}\r\n         {Object.keys(this.state.userLocation).length !== 0 ? (\r\n              <Marker\r\n                latitude={this.state.userLocation.lat}\r\n                longitude={this.state.userLocation.long}\r\n              >\r\n               <img width={35} height={35}  src=\"https://img.icons8.com/plasticine/100/000000/worldwide-location.png\" alt = \"user_location\"/>\r\n              </Marker>\r\n              ) : ( \r\n              <div></div>\r\n            )}\r\n            \r\n        {this.state.selectedLink ? (\r\n          <Popup\r\n            style={MapStyles}\r\n            latitude={parseFloat(this.state.selectedLink.latitude)}\r\n            longitude={parseFloat(this.state.selectedLink.longitude)}\r\n            onClose={() => {\r\n              this.setSelectedLink(null);\r\n            }}\r\n          >\r\n          <div>\r\n              <p>{this.state.selectedLink.street_address}</p>\r\n              <p>{this.state.selectedLink.community_board}</p>\r\n              <p>{this.state.selectedLink.council_district}</p>\r\n              <p>{this.state.selectedLink.latitude}</p>\r\n              <p>{this.state.selectedLink.longitude}</p>\r\n            </div>\r\n          </Popup>\r\n        ) : null}\r\n        <Search \r\n            handleInputChange = {this.handleInputChange.bind(this)}\r\n            matches = {this.state.matches}\r\n            showMatches = {this.state.showMatches}\r\n            myValue= {this.state.searchInput}\r\n            alertClicked = {this.alertClicked}\r\n        /> \r\n      <div style={userLocStyle}>\r\n        <Button   \r\n           style={userBtnStyle} \r\n           onClick={this.setUserLocation}>\r\n          <img src=\"https://img.icons8.com/material-outlined/24/000000/location-off.png\" alt = \"location\"/>\r\n        </Button>\r\n      </div>\r\n      <div style ={modalLocStyle}>\r\n        <Modal/>\r\n      </div>\r\n      <div>\r\n        <InfoBox\r\n            link_id={!this.state.selectedLink ? \"\" : this.state.selectedLink.cb_link_id} \r\n            sa={!this.state.selectedLink ? \"\" : this.state.selectedLink.street_address}\r\n            cb={!this.state.selectedLink ? \"\" : this.state.selectedLink.council_district}\r\n            lat={!this.state.selectedLink ? \"\" : this.state.selectedLink.latitude}\r\n            lon={!this.state.selectedLink ? \"\" : this.state.selectedLink.longitude}\r\n            showInfo={this.state.showInfo}\r\n        />  \r\n        <div style={{backgroundColor:\"white\", height:\"250px\"}}></div>   \r\n      </div>\r\n        </ReactMapGL>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n\r\n//extras\r\n/**\r\n * \r\n * \r\n *                 <img \r\n                style={{\"align-items\" : \"center\"}}\r\n                className=\"marker_btt\"\r\n                onClick={e => {\r\n                e.preventDefault();\r\n                this.setSelectedLink(park);\r\n              }}\r\n                width={15} height={15} src=\"https://img.icons8.com/ios-glyphs/64/000000/billboard.png\" alt = \"linknyc\"/>\r\n * \r\n * \r\n *     navigator.geolocation.getCurrentPosition(position => {\r\n         let setUserLocation = {\r\n             lat: position.coords.latitude,\r\n             long: position.coords.longitude\r\n          };\r\n         let newViewport = {\r\n            height: \"100vh\",\r\n            width: \"100vw\",\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude,\r\n            zoom: 10\r\n          };\r\n          this.setState({\r\n            viewport: newViewport,\r\n            userLocation: setUserLocation\r\n         });\r\n      });\r\n * \r\n * \r\n * \r\n * {Object.keys(this.state.userLocation).length !== 0 ? (\r\n              <Marker\r\n                latitude={this.state.userLocation.lat}\r\n                longitude={this.state.userLocation.long}\r\n              >\r\n               <img src=\"https://img.icons8.com/plasticine/100/000000/worldwide-location.png\"/>\r\n              </Marker>\r\n              ) : ( \r\n              <div>Empty</div>\r\n            )}\r\n * \r\n * \r\n * <div>\r\n              <h2>{this.state.selectedLink.community_board}</h2>\r\n              <p>{this.state.selectedLink.council_district}</p>\r\n            </div>\r\n *  {this.state.selectedLink ? console.log(this.state.selectedLink): console.log('not filled')}\r\n * {this.state.selectedLink ? (\r\n          <Popup\r\n            latitude={this.state.selectedLink.latitude}\r\n            longitude={this.state.selectedLink.longitude}\r\n            onClose={() => {\r\n              setSelectedLink(null);\r\n            }}\r\n          >\r\n            <div>\r\n              <h2>{this.state.selectedLink.community_board}</h2>\r\n              <p>{this.state.selectedLink.council_district}</p>\r\n            </div>\r\n          </Popup>\r\n        ) : null}\r\n * \r\n * \r\n * \r\n * \r\n *  {my_data.map(park => (\r\n          console.log(park.latitude + park.longitude)\r\n        ))}\r\n \r\n       {this.props.links.map(park => (\r\n          <Marker\r\n            key = {park.cb_link_id}\r\n            latitude={parseFloat(park.latitude)}\r\n            longitude={parseFloat(park.longitude)}\r\n          >\r\n            <button \r\n             className=\"marker_btt\"\r\n             >\r\n                <img width={10} height={10} src=\"https://img.icons8.com/android/24/000000/computer.png\" alt = \"linknyc\"/>\r\n            </button>\r\n          </Marker>\r\n        ))}\r\n \r\n \r\n\r\nconst Map = (props) => {\r\n  return (\r\n     \r\n    <div>\r\n      <ReactMapGL\r\n        {...props.viewport}\r\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n        onViewportChange={(viewport) => this.setState({viewport})}\r\n      >\r\n\r\n       \r\n        </ReactMapGL>\r\n    </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Map;\r\n\r\n\r\n\r\n\r\n        */\r\n\r\n\r\n\r\n\r\n\r\n \r\n","import React from 'react';\r\nimport { Accordion, Card, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst InfoBox = ( props ) => {\r\n\r\n    const Styles = {\r\n        //147 recommended marginTop: \"147%\",\r\n        marginTop: \"115%\",\r\n        BackgroundColor: \"white\"\r\n\r\n        //transform: \"rotate(180deg)\"\r\n    }\r\n\r\n    const TextStyles ={\r\n        \"text-align\": \"left\"\r\n    }\r\n\r\n    return (\r\n        <div style={Styles}>\r\n        <Accordion defaultActiveKey=\"0\">\r\n            <Card>\r\n            <Card.Header >\r\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey=\"0\" >\r\n                <Card.Body>\r\n                <div>\r\n                    <div>{`${props.link_id.toLowerCase()}`}</div>\r\n                    <div>{`4.5 Stars`}</div>\r\n                    <div>{`Link Address: ${props.sa.toLowerCase()}`}</div>\r\n                    <div>{`Community Board: ${props.cb}`}</div>\r\n                </div>\r\n                </Card.Body>\r\n            </Accordion.Collapse>\r\n            </Card>    \r\n        </Accordion>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default InfoBox;\r\n\r\n\r\n//add a click function in your info box\r\n\r\n// and then in MAp when a button in a map is clicked invoke that function\r\n","import React, { Component } from 'react';\r\nimport {Button, Modal } from 'react-bootstrap';\r\n\r\nclass popUp extends Component {\r\n\r\n  state = { show: false };\r\n\r\n  render() {\r\n\r\n    const handleShow = () => {\r\n      console.log('attempting to show modal')\r\n      this.setState({ show: true });\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      this.setState({ show: false });\r\n    };\r\n\r\n    const Styles = {\r\n        display:\"block\",\r\n        backgroundColor:\"\t#6495ED\",\r\n        borderRadius: \"40%\",\r\n        borderWidth: \"thin\",\r\n        borderColor: \"white\",\r\n        border: \"1px solid\",\r\n        padding: \"10px\",\r\n        boxShadow: \"1px 1px 1px #888888\"\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Button\r\n          style={Styles} \r\n          variant=\"primary\" \r\n          onClick={handleShow}\r\n          >\r\n          <img src=\"https://img.icons8.com/android/24/000000/plus.png\" alt=\"buttons\"></img>\r\n        </Button>\r\n\r\n      <Modal show={this.state.show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>NYC-Link</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div>\r\n            NYC-Link was built to help you find linkNYC stations near you.\r\n            Use the map interface to search for a location near you.\r\n          </div>\r\n          <br></br>\r\n           <div>\r\n            <b>Coming soon:</b> NYC-Link \r\n            allows you to route to the nearest station as well. More features \r\n            coming soon.\r\n           </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>  \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default popUp;\r\n\r\n/**\r\n * <Modal show={false} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal heading</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n * \r\n */","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\n\nconst match = ({ alertClicked, address, longitude, latitude }) => {\n\n\n    const MatchStyles = {\n        height: \"10%\"\n    }\n\n    const ImgStyles = {\n        float: \"right\",\n        display: \"inline\",\n        marginTop:\"-11%\",\n        height: \"6%\",\n        width: \"6%\"\n    }\n\n    const ImgStylesLoc = {\n        float: \"left\",\n        display: \"inline\",\n        marginTop:\"-11%\",\n        height: \"6%\",\n        width: \"6%\"\n    }\n\n    const latLon = [\n        {longitude: `${longitude}`},\n        {latitude: `${latitude}`}\n    ]\n    \nreturn (\n    <div>\n    <ListGroup.Item\n        style={MatchStyles} \n        className=\"Matches\"\n        action \n        value={`[${latitude}, ${longitude}]`}\n        // function expressions could cause this to rerender unnecessarily.\n        onClick={(address) => alertClicked(address)}> \n          {`${address.toLowerCase()}`}\n          <img \n            style={ImgStyles}\n            src=\"https://img.icons8.com/ios-glyphs/32/000000/up-left-arrow.png\" alt = \"arrow\">\n          </img>\n          <img\n            style={ImgStylesLoc} \n            src=\"https://img.icons8.com/material/24/000000/worldwide-location--v1.png\" alt= \"userloc\"> \n          </img>\n    </ListGroup.Item>\n    </div>\n)\n}\n\nexport default match;\n","import React from 'react';\nimport {ListGroup, Form} from 'react-bootstrap';\nimport Match from './Match'\n\nconst Search = ( props ) => {\n\n    const SearchStyles = {\n        position: \"absolute\",\n        width: \"90%\",\n        borderRadius: \"25px\",\n        padding: \"2%\",\n        marginLeft: \"-45%\",\n        marginTop: \"5%\"\n    }\n\n    const MatchStyles = {\n        marginTop:\"40%\"\n    }\n\n\n      return (\n        \n        <div>\n        <div>\n            <input \n                style={SearchStyles}\n                placeholder=\"Search for a Link Near you...\" \n                onChange = {props.handleInputChange} \n                value = {props.myValue}\n            />\n        </div>    \n        <div>\n            <li defaultActiveKey={props.showMatches}>\n              {\n                props.matches.map(match => {\n                  return <Match \n                            longitude={match.longitude}\n                            latitude={match.latitude} \n                            address={match.street_address} \n                            handleInputChange={props.handleInputChange}\n                            alertClicked = {props.alertClicked}\n                            showMatches = {props.showMatches}\n                            />\n                })\n              }\n            </li>\n            \n        </div>\n        </div>\n    );\n};\n\nexport default Search;\n\n\n/**\n * \n * <Form style = {{width: \"75%\"}} onSubmit = {this.handleSubmit}>\n            <Form.Group controlId=\"formSearch\">\n                <Form.Control type=\"text\" name = \"my_search\" placeholder=\"Search for a Link Near you...\" onChange = {this.handleInputChange} />\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">\n                Search\n                </Button>\n            </Form>\n */","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Map from './components/Map';\n//import Modal from './components/Modal'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Map/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}