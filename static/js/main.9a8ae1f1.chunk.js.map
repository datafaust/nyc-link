{"version":3,"sources":["components/InfoBox.js","components/Match.js","components/Search.js","components/Modal.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","props","style","marginTop","BackgroundColor","Accordion","defaultActiveKey","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","link_id","toLowerCase","sa","cb","match","handleInputChange","address","showMatches","ListGroup","Item","height","className","action","onClick","float","display","width","src","alt","Search","position","borderRadius","padding","marginLeft","placeholder","onChange","value","myValue","matches","map","Match","street_address","popUp","state","show","handleClose","setState","backgroundColor","borderWidth","borderColor","border","boxShadow","console","log","Modal","this","onHide","closeButton","Title","Footer","Component","Map","setUserLocation","navigator","geolocation","getCurrentPosition","lat","coords","latitude","long","longitude","newViewport","zoom","viewport","userLocation","setSelectedLink","e","selectedLink","showInfo","event","target","preventDefault","searchInput","updateMatches","length","handleSubmit","displayMatches","findMatches","wordToMatch","my_obj","filter","place","regex","RegExp","newStateMatches","links","alertClicked","searchLink","fetch","then","res","json","markerStyle","backgroundImage","MapStyles","mapboxApiAccessToken","process","onViewportChange","park","key","cb_link_id","parseFloat","Object","keys","onClose","community_board","council_district","bind","right","zIndex","lon","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"sVA0CeA,G,MAtCC,SAAEC,GAcd,OACI,yBAAKC,MAbM,CAEXC,UAAW,OACXC,gBAAiB,UAWjB,kBAACC,EAAA,EAAD,CAAWC,iBAAiB,KACxB,kBAACC,EAAA,EAAD,KACA,kBAACA,EAAA,EAAKC,OAAN,KACI,kBAACH,EAAA,EAAUI,OAAX,CAAkBC,GAAIC,IAAQC,QAAQ,OAAOC,SAAS,OAG1D,kBAACR,EAAA,EAAUS,SAAX,CAAoBD,SAAS,KACzB,kBAACN,EAAA,EAAKQ,KAAN,KACA,6BACI,uCAASd,EAAMe,QAAQC,gBACvB,0CACA,qDAAuBhB,EAAMiB,GAAGD,gBAChC,wDAA0BhB,EAAMkB,a,QCgBrCC,EA7CD,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,kBAAmBC,EAA2B,EAA3BA,QAA2B,EAAlBC,YAuB7C,OACI,6BACA,kBAACC,EAAA,EAAUC,KAAX,CACIvB,MAvBgB,CAChBwB,OAAQ,OAuBRC,UAAU,UACVC,QAAM,EAENC,QAAS,SAACP,GAAD,OAAaD,EAAkBC,KACtC,qCAAOA,EAAQL,gBACf,yBACEf,MA1BU,CACd4B,MAAO,QACPC,QAAS,SACT5B,UAAU,OACVuB,OAAQ,KACRM,MAAO,MAsBHC,IAAI,gEAAgEC,IAAM,UAE5E,yBACEhC,MAtBa,CACjB4B,MAAO,OACPC,QAAS,SACT5B,UAAU,OACVuB,OAAQ,KACRM,MAAO,MAkBHC,IAAI,uEAAuEC,IAAK,eCQ7EC,EA7CA,SAAElC,GAgBX,OAEE,6BACA,6BACI,2BACIC,MAnBS,CACjBkC,SAAU,WACVJ,MAAO,MACPK,aAAc,OACdC,QAAS,KACTC,WAAY,OACZpC,UAAW,MAcHqC,YAAY,gCACZC,SAAYxC,EAAMoB,kBAClBqB,MAASzC,EAAM0C,WAGvB,6BACI,wBAAIrC,iBAAkBL,EAAMsB,aAExBtB,EAAM2C,QAAQC,KAAI,SAAAzB,GAChB,OAAO,kBAAC0B,EAAD,CACGxB,QAASF,EAAM2B,eACf1B,kBAAmBpB,EAAMoB,kBACzBE,YAAetB,EAAMsB,qB,QC4BlCyB,E,2MA7DbC,MAAQ,CAAEC,MAAM,G,wEAEN,IAAD,OAODC,EAAc,WAClB,EAAKC,SAAS,CAAEF,MAAM,KAcxB,OACE,6BACE,kBAACvC,EAAA,EAAD,CACET,MAdS,CACX6B,QAAQ,QACRsB,gBAAgB,YAChBhB,aAAc,MACdiB,YAAa,OACbC,YAAa,QACbC,OAAQ,YACRlB,QAAS,OACTmB,UAAW,uBAOT7C,QAAQ,UACRiB,QAzBa,WACjB6B,QAAQC,IAAI,4BACZ,EAAKP,SAAS,CAAEF,MAAM,MAyBlB,yBAAKjB,IAAI,oDAAoDC,IAAI,aAGrE,kBAAC0B,EAAA,EAAD,CAAOV,KAAMW,KAAKZ,MAAMC,KAAMY,OAAQX,GACpC,kBAACS,EAAA,EAAMpD,OAAP,CAAcuD,aAAW,GACvB,kBAACH,EAAA,EAAMI,MAAP,kBAEF,kBAACJ,EAAA,EAAM7C,KAAP,KACE,wJAIA,6BACC,6BACC,2CADD,6FAMH,kBAAC6C,EAAA,EAAMK,OAAP,KACE,kBAACtD,EAAA,EAAD,CAAQC,QAAQ,YAAYiB,QAASsB,GAArC,gB,GArDUe,aC2QLC,E,YAhQX,WAAYlE,GAAQ,IAAD,8BACnB,4CAAMA,KA+BVmE,gBAAkB,WAChBV,QAAQC,IAAI,uCACZU,UAAUC,YAAYC,oBAAmB,SAAAnC,GACvC,IAAIgC,EAAkB,CAClBI,IAAKpC,EAASqC,OAAOC,SACrBC,KAAMvC,EAASqC,OAAOG,WAEtBC,EAAc,CACfnD,OAAQ,QACRM,MAAO,QACP0C,SAAUtC,EAASqC,OAAOC,SAC1BE,UAAWxC,EAASqC,OAAOG,UAC3BE,KAAM,IAER,EAAK1B,SAAS,CACZ2B,SAAUF,EACVG,aAAcZ,QAhDE,EAsDnBa,gBAAkB,SAACC,GAEjB,EAAK9B,SAAS,CAAC+B,aAAaD,EAAGE,UAAS,KAxDvB,EA6DnB/D,kBAAoB,SAACgE,GACnB3B,QAAQC,IAAI0B,EAAMC,OAAO5C,OACzB2C,EAAME,iBACN,EAAKnC,SAAS,CAACoC,YAAaH,EAAMC,OAAO5C,QACzC,EAAK+C,gBACL/B,QAAQC,IAAI,EAAKV,MAAM1B,aACvBmC,QAAQC,IAAI,EAAKV,MAAML,QAAQ8C,SAnEd,EAsEnBC,aAAe,SAACN,GACdA,EAAME,iBACN,EAAKK,kBAxEY,EA2EnBC,YAAc,SAACC,EAAaC,GACxB,OAAOA,EAAOC,QAAO,SAAAC,GAErB,IAAMC,EAAQ,IAAIC,OAAOL,EAAa,MAEtC,OAAOG,EAAMlD,eAAe3B,MAAM8E,OAhFnB,EAoFnBT,cAAe,WACb,IACMW,EADa,EAAKP,YAAY,EAAK5C,MAAMuC,YAAa,EAAKvC,MAAMoD,OACpCxD,KAAI,SAAAoD,GAErC,OAAOA,KAET,EAAK7C,SAAS,CAACR,QAAQwD,IACvB,EAAKnD,MAAML,QAAQ8C,OAAS,EAAI,EAAKtC,SAAS,CAAC7B,aAAa,IAAS,EAAK6B,SAAS,CAAC7B,aAAa,KA3FhF,EA8FnB+E,aAAe,SAAAhF,GACb,EAAK8B,SAAS,CAACmD,WAAYjF,KA7F7B,EAAK2B,MAAQ,CACX8B,SAAU,CACRrD,OAAQ,QACRM,MAAO,QACP0C,SAAU,QACVE,WAAY,OACZE,KAAM,IAERuB,MAAO,GACPlB,aAAa,KACbH,aAAc,GACdQ,YAAa,GACbjE,aAAa,EACbqB,QAAS,GACT2D,WAAY,GACZnB,UAAU,GAjBO,E,iFAsBA,IAAD,OAClBoB,MAAM,yDACHC,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAC,GAAG,OAEL,EAAKtD,SAAS,CAACiD,MAAMK,S,+BAwEnB,IAAD,OAEDE,EAAc,CAClBlF,OAAO,OACPM,MAAM,OACND,QAAQ,QACRM,aAAc,MACdiB,YAAa,OACbC,YAAa,QACbC,OAAQ,YACRlB,QAAS,OACTmB,UAAW,sBACXoD,gBAAiB,oEAiDbC,EAAY,CAChB1E,SAAU,YAIZ,OAEA,6BACA,6BACE,kBAAC,IAAD,eACElC,MAAS4G,GACLjD,KAAKZ,MAAM8B,SAFjB,CAGEgC,qBAAsBC,mGACtBC,iBAAkB,SAAClC,GAAD,OAAc,EAAK3B,SAAS,CAAC2B,gBAEhDlB,KAAKZ,MAAMoD,MAAMxD,KAAI,SAAAqE,GAAI,OACtB,kBAAC,IAAD,CACEC,IAAOD,EAAKE,WACZ1C,SAAU2C,WAAWH,EAAKxC,UAC1BE,UAAWyC,WAAWH,EAAKtC,YAE3B,4BACE1E,MAAO0G,EACPjF,UAAU,aACVE,QAAS,SAAAqD,GACTA,EAAEK,iBACF,EAAKN,gBAAgBiC,UAMuB,IAAhDI,OAAOC,KAAK1D,KAAKZ,MAAM+B,cAAcU,OACjC,kBAAC,IAAD,CACEhB,SAAUb,KAAKZ,MAAM+B,aAAaR,IAClCI,UAAWf,KAAKZ,MAAM+B,aAAaL,MAEpC,yBAAK3C,MAAO,GAAIN,OAAQ,GAAKO,IAAI,sEAAsEC,IAAM,mBAG9G,8BAGL2B,KAAKZ,MAAMkC,aACV,kBAAC,IAAD,CACEjF,MAAO4G,EACPpC,SAAU2C,WAAWxD,KAAKZ,MAAMkC,aAAaT,UAC7CE,UAAWyC,WAAWxD,KAAKZ,MAAMkC,aAAaP,WAC9C4C,QAAS,WACP,EAAKvC,gBAAgB,QAGzB,6BACI,2BAAIpB,KAAKZ,MAAMkC,aAAapC,gBAC5B,2BAAIc,KAAKZ,MAAMkC,aAAasC,iBAC5B,2BAAI5D,KAAKZ,MAAMkC,aAAauC,kBAC5B,2BAAI7D,KAAKZ,MAAMkC,aAAaT,UAC5B,2BAAIb,KAAKZ,MAAMkC,aAAaP,aAG9B,KACJ,kBAAC,EAAD,CACIvD,kBAAqBwC,KAAKxC,kBAAkBsG,KAAK9D,MACjDjB,QAAWiB,KAAKZ,MAAML,QACtBrB,YAAesC,KAAKZ,MAAM1B,YAC1BoB,QAAUkB,KAAKZ,MAAMuC,YACrBc,aAAgBzC,KAAKyC,eAE3B,yBAAKpG,MAvGc,CACnB8B,MAAM,GACNN,OAAO,GACPU,SAAS,WACTjC,UAAU,OACVyH,MAAM,MACNC,OAAO,KAkGL,kBAAClH,EAAA,EAAD,CACGT,MAhGc,CACnB6B,QAAQ,QACRsB,gBAAgB,QAChBhB,aAAc,MACbiB,YAAa,OACdC,YAAa,QACbC,OAAQ,YACRlB,QAAS,OACTmB,UAAW,uBAyFN5B,QAASgC,KAAKO,iBACf,yBAAKnC,IAAI,sEAAsEC,IAAM,eAGzF,yBAAKhC,MAxHe,CACpB8B,MAAM,GACNN,OAAO,GACPU,SAAS,WACTjC,UAAU,MACVyH,MAAM,MACNC,OAAO,KAmHL,kBAAC,EAAD,OAEF,6BACE,kBAAC,EAAD,CACI7G,QAAU6C,KAAKZ,MAAMkC,aAAoBtB,KAAKZ,MAAMkC,aAAaiC,WAA7B,GACpClG,GAAK2C,KAAKZ,MAAMkC,aAAoBtB,KAAKZ,MAAMkC,aAAapC,eAA7B,GAC/B5B,GAAK0C,KAAKZ,MAAMkC,aAAoBtB,KAAKZ,MAAMkC,aAAauC,iBAA7B,GAC/BlD,IAAMX,KAAKZ,MAAMkC,aAAoBtB,KAAKZ,MAAMkC,aAAaT,SAA7B,GAChCoD,IAAMjE,KAAKZ,MAAMkC,aAAoBtB,KAAKZ,MAAMkC,aAAaP,UAA7B,GAChCQ,SAAUvB,KAAKZ,MAAMmC,WAEzB,yBAAKlF,MAAO,CAACmD,gBAAgB,QAAS3B,OAAO,mB,GAzPnCwC,aCMH6D,E,iLARX,OACE,yBAAKpG,UAAU,OACb,kBAAC,EAAD,W,GALUuC,aCKE8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/G,MACvB,2DCZNgH,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBlE,WACrBA,UAAUmE,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.9a8ae1f1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Accordion, Card, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst InfoBox = ( props ) => {\r\n\r\n    const Styles = {\r\n        //147 recommended marginTop: \"147%\",\r\n        marginTop: \"125%\",\r\n        BackgroundColor: \"white\"\r\n\r\n        //transform: \"rotate(180deg)\"\r\n    }\r\n\r\n    const TextStyles ={\r\n        \"text-align\": \"left\"\r\n    }\r\n\r\n    return (\r\n        <div style={Styles}>\r\n        <Accordion defaultActiveKey=\"0\">\r\n            <Card>\r\n            <Card.Header >\r\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey=\"0\" >\r\n                <Card.Body>\r\n                <div>\r\n                    <div>{`${props.link_id.toLowerCase()}`}</div>\r\n                    <div>{`4.5 Stars`}</div>\r\n                    <div>{`Link Address: ${props.sa.toLowerCase()}`}</div>\r\n                    <div>{`Community Board: ${props.cb}`}</div>\r\n                </div>\r\n                </Card.Body>\r\n            </Accordion.Collapse>\r\n            </Card>    \r\n        </Accordion>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default InfoBox;\r\n\r\n\r\n//add a click function in your info box\r\n\r\n// and then in MAp when a button in a map is clicked invoke that function\r\n","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\n\nconst match = ({ handleInputChange, address, showMatches }) => {\n\n\n    const MatchStyles = {\n        height: \"10%\"\n    }\n\n    const ImgStyles = {\n        float: \"right\",\n        display: \"inline\",\n        marginTop:\"-11%\",\n        height: \"6%\",\n        width: \"6%\"\n    }\n\n    const ImgStylesLoc = {\n        float: \"left\",\n        display: \"inline\",\n        marginTop:\"-11%\",\n        height: \"6%\",\n        width: \"6%\"\n    }\n\nreturn (\n    <div>\n    <ListGroup.Item\n        style={MatchStyles} \n        className=\"Matches\"\n        action \n        // function expressions could cause this to rerender unnecessarily.\n        onClick={(address) => handleInputChange(address)}> \n          <p>{`${address.toLowerCase()}`}</p>\n          <img \n            style={ImgStyles}\n            src=\"https://img.icons8.com/ios-glyphs/32/000000/up-left-arrow.png\" alt = \"arrow\">\n          </img>\n          <img\n            style={ImgStylesLoc} \n            src=\"https://img.icons8.com/material/24/000000/worldwide-location--v1.png\" alt= \"userloc\"> \n          </img>\n    </ListGroup.Item>\n    </div>\n)\n}\n\nexport default match;\n","import React from 'react';\nimport {ListGroup, Form} from 'react-bootstrap';\nimport Match from './Match'\n\nconst Search = ( props ) => {\n\n    const SearchStyles = {\n        position: \"absolute\",\n        width: \"90%\",\n        borderRadius: \"25px\",\n        padding: \"2%\",\n        marginLeft: \"-45%\",\n        marginTop: \"5%\"\n    }\n\n    const MatchStyles = {\n        marginTop:\"40%\"\n    }\n\n\n      return (\n        \n        <div>\n        <div>\n            <input \n                style={SearchStyles}\n                placeholder=\"Search for a Link Near you...\" \n                onChange = {props.handleInputChange} \n                value = {props.myValue}\n            />\n        </div>    \n        <div>\n            <li defaultActiveKey={props.showMatches}>\n              {\n                props.matches.map(match => {\n                  return <Match \n                            address={match.street_address} \n                            handleInputChange={props.handleInputChange}\n                            showMatches = {props.showMatches}\n                            />\n                })\n              }\n            </li>\n            \n        </div>\n        </div>\n    );\n};\n\nexport default Search;\n\n\n/**\n * \n * <Form style = {{width: \"75%\"}} onSubmit = {this.handleSubmit}>\n            <Form.Group controlId=\"formSearch\">\n                <Form.Control type=\"text\" name = \"my_search\" placeholder=\"Search for a Link Near you...\" onChange = {this.handleInputChange} />\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">\n                Search\n                </Button>\n            </Form>\n */","import React, { Component } from 'react';\r\nimport {Button, Modal } from 'react-bootstrap';\r\n\r\nclass popUp extends Component {\r\n\r\n  state = { show: false };\r\n\r\n  render() {\r\n\r\n    const handleShow = () => {\r\n      console.log('attempting to show modal')\r\n      this.setState({ show: true });\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      this.setState({ show: false });\r\n    };\r\n\r\n    const Styles = {\r\n        display:\"block\",\r\n        backgroundColor:\"\t#6495ED\",\r\n        borderRadius: \"40%\",\r\n        borderWidth: \"thin\",\r\n        borderColor: \"white\",\r\n        border: \"1px solid\",\r\n        padding: \"10px\",\r\n        boxShadow: \"1px 1px 1px #888888\"\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Button\r\n          style={Styles} \r\n          variant=\"primary\" \r\n          onClick={handleShow}\r\n          >\r\n          <img src=\"https://img.icons8.com/android/24/000000/plus.png\" alt=\"buttons\"></img>\r\n        </Button>\r\n\r\n      <Modal show={this.state.show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>NYC-Link</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div>\r\n            NYC-Link was built to help you find linkNYC stations near you.\r\n            Use the map interface to search for a location near you.\r\n          </div>\r\n          <br></br>\r\n           <div>\r\n            <b>Coming soon:</b> NYC-Link \r\n            allows you to route to the nearest station as well. More features \r\n            coming soon.\r\n           </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>  \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default popUp;\r\n\r\n/**\r\n * <Modal show={false} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal heading</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n * \r\n */","import React, {Component} from 'react';\r\nimport ReactMapGL, { Marker, Popup }  from 'react-map-gl';\r\nimport './Map.css'\r\nimport InfoBox from './InfoBox';\r\nimport { Button } from 'react-bootstrap';\r\nimport Search from './Search';\r\n//import Match from './Match';\r\nimport Modal from './Modal';\r\n\r\n//import classes from './mapbox-gl.css'\r\n//const my_data = require('../data/test.json');\r\n\r\nclass Map extends Component {\r\n\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewport: {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        latitude: 40.7128,\r\n        longitude: -74.0060,\r\n        zoom: 10\r\n      },\r\n      links: [],\r\n      selectedLink:null,\r\n      userLocation: {},\r\n      searchInput: \"\",\r\n      showMatches: false,\r\n      matches: [],\r\n      searchLink: [],\r\n      showInfo: false\r\n    };\r\n  }\r\n  \r\n\r\n  componentDidMount() {\r\n    fetch('https://data.cityofnewyork.us/resource/s4kf-3yrf.json')\r\n      .then(res=> res.json())\r\n      .then(res=> \r\n          //console.log(json)\r\n          this.setState({links:res})\r\n      );\r\n  }\r\n\r\n //function to set user location \r\nsetUserLocation = () => {\r\n  console.log(\"attempting to get user location ...\")\r\n  navigator.geolocation.getCurrentPosition(position => {\r\n    let setUserLocation = {\r\n        lat: position.coords.latitude,\r\n        long: position.coords.longitude\r\n     };\r\n    let newViewport = {\r\n       height: \"100vh\",\r\n       width: \"100vw\",\r\n       latitude: position.coords.latitude,\r\n       longitude: position.coords.longitude,\r\n       zoom: 14\r\n     };\r\n     this.setState({\r\n       viewport: newViewport,\r\n       userLocation: setUserLocation\r\n    });\r\n });\r\n}\r\n\r\n//function to select the link for the popup\r\n    setSelectedLink = (e) => {\r\n      //console.log('clicked')\r\n      this.setState({selectedLink:e, showInfo:true})\r\n    }\r\n\r\n    //****************child functions */\r\n\r\n    handleInputChange = (event) => {\r\n      console.log(event.target.value)\r\n      event.preventDefault()\r\n      this.setState({searchInput: event.target.value })\r\n      this.updateMatches()  \r\n      console.log(this.state.showMatches)\r\n      console.log(this.state.matches.length)\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      this.displayMatches();\r\n    }\r\n\r\n    findMatches = (wordToMatch, my_obj) => {\r\n        return my_obj.filter(place => {\r\n        // here we need to figure out the matches\r\n        const regex = new RegExp(wordToMatch, 'gi');\r\n        //console.log(place.street_address.match(regex))\r\n        return place.street_address.match(regex)\r\n      });\r\n    }\r\n\r\n    updateMatches =() => {\r\n      const matchArray = this.findMatches(this.state.searchInput, this.state.links);\r\n      const newStateMatches = matchArray.map(place => {\r\n        //console.log(place.street_address);\r\n        return place \r\n      });\r\n      this.setState({matches:newStateMatches})\r\n      this.state.matches.length > 1 ? this.setState({showMatches: true}) : this.setState({showMatches: false})  \r\n    }\r\n\r\n    alertClicked = address => {\r\n      this.setState({searchLink: address});\r\n    }\r\n\r\n\r\n  render() {\r\n    \r\n    const markerStyle = {\r\n      height:\"20px\",\r\n      width:\"20px\",\r\n      display:\"block\",\r\n      borderRadius: \"30%\",\r\n      borderWidth: \"thin\",\r\n      borderColor: \"white\",\r\n      border: \"1px solid\",\r\n      padding: \"15px\",\r\n      boxShadow: \"1px 1px 1px #888888\",\r\n      backgroundImage: 'url(\"https://img.icons8.com/ios-glyphs/30/000000/billboard.png\")'\r\n    };\r\n\r\n    \r\n    const modalLocStyle = {\r\n      width:20,\r\n      height:20,\r\n      position:'absolute',\r\n      marginTop:\"95%\",\r\n      right:\"10%\",\r\n      zIndex:10\r\n    };\r\n\r\n\r\n    const userLocStyle = {\r\n      width:20,\r\n      height:20,\r\n      position:'absolute',\r\n      marginTop:\"110%\",\r\n      right:\"10%\",\r\n      zIndex:10\r\n    };\r\n\r\n    const userBtnStyle = {\r\n      display:\"block\",\r\n      backgroundColor:\"white\",\r\n      borderRadius: \"40%\"\r\n      ,borderWidth: \"thin\",\r\n      borderColor: \"white\",\r\n      border: \"1px solid\",\r\n      padding: \"10px\",\r\n      boxShadow: \"1px 1px 1px #888888\"\r\n    }\r\n\r\n    /**\r\n    const userImgStyle = {\r\n      width:20,\r\n      height:20,\r\n      position:'absolute',\r\n      top:\"0%\",\r\n      left:\"5%\",\r\n      zIndex:10\r\n    };\r\n     */\r\n\r\n    const InfoStyles = {\r\n        marginTop: \"70px\"\r\n    }\r\n\r\n    const MapStyles = {\r\n      position: \"relative\"\r\n    }\r\n\r\n    //render matches to search bar \r\n    return (\r\n     \r\n    <div>\r\n    <div>\r\n      <ReactMapGL\r\n        style = {MapStyles}\r\n        {...this.state.viewport}\r\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n        onViewportChange={(viewport) => this.setState({viewport})}\r\n      >\r\n      {this.state.links.map(park => (\r\n          <Marker\r\n            key = {park.cb_link_id}\r\n            latitude={parseFloat(park.latitude)}\r\n            longitude={parseFloat(park.longitude)}\r\n          >\r\n            <button \r\n              style={markerStyle}\r\n              className=\"marker_btt\"\r\n              onClick={e => {\r\n              e.preventDefault();\r\n              this.setSelectedLink(park);\r\n            }}\r\n             >\r\n            </button>\r\n          </Marker>\r\n        ))}\r\n         {Object.keys(this.state.userLocation).length !== 0 ? (\r\n              <Marker\r\n                latitude={this.state.userLocation.lat}\r\n                longitude={this.state.userLocation.long}\r\n              >\r\n               <img width={35} height={35}  src=\"https://img.icons8.com/plasticine/100/000000/worldwide-location.png\" alt = \"user_location\"/>\r\n              </Marker>\r\n              ) : ( \r\n              <div></div>\r\n            )}\r\n            \r\n        {this.state.selectedLink ? (\r\n          <Popup\r\n            style={MapStyles}\r\n            latitude={parseFloat(this.state.selectedLink.latitude)}\r\n            longitude={parseFloat(this.state.selectedLink.longitude)}\r\n            onClose={() => {\r\n              this.setSelectedLink(null);\r\n            }}\r\n          >\r\n          <div>\r\n              <p>{this.state.selectedLink.street_address}</p>\r\n              <p>{this.state.selectedLink.community_board}</p>\r\n              <p>{this.state.selectedLink.council_district}</p>\r\n              <p>{this.state.selectedLink.latitude}</p>\r\n              <p>{this.state.selectedLink.longitude}</p>\r\n            </div>\r\n          </Popup>\r\n        ) : null}\r\n        <Search \r\n            handleInputChange = {this.handleInputChange.bind(this)}\r\n            matches = {this.state.matches}\r\n            showMatches = {this.state.showMatches}\r\n            myValue= {this.state.searchInput}\r\n            alertClicked = {this.alertClicked}\r\n        /> \r\n      <div style={userLocStyle}>\r\n        <Button   \r\n           style={userBtnStyle} \r\n           onClick={this.setUserLocation}>\r\n          <img src=\"https://img.icons8.com/material-outlined/24/000000/location-off.png\" alt = \"location\"/>\r\n        </Button>\r\n      </div>\r\n      <div style ={modalLocStyle}>\r\n        <Modal/>\r\n      </div>\r\n      <div>\r\n        <InfoBox\r\n            link_id={!this.state.selectedLink ? \"\" : this.state.selectedLink.cb_link_id} \r\n            sa={!this.state.selectedLink ? \"\" : this.state.selectedLink.street_address}\r\n            cb={!this.state.selectedLink ? \"\" : this.state.selectedLink.council_district}\r\n            lat={!this.state.selectedLink ? \"\" : this.state.selectedLink.latitude}\r\n            lon={!this.state.selectedLink ? \"\" : this.state.selectedLink.longitude}\r\n            showInfo={this.state.showInfo}\r\n        />  \r\n        <div style={{backgroundColor:\"white\", height:\"250px\"}}></div>   \r\n      </div>\r\n        </ReactMapGL>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n\r\n//extras\r\n/**\r\n * \r\n * \r\n *                 <img \r\n                style={{\"align-items\" : \"center\"}}\r\n                className=\"marker_btt\"\r\n                onClick={e => {\r\n                e.preventDefault();\r\n                this.setSelectedLink(park);\r\n              }}\r\n                width={15} height={15} src=\"https://img.icons8.com/ios-glyphs/64/000000/billboard.png\" alt = \"linknyc\"/>\r\n * \r\n * \r\n *     navigator.geolocation.getCurrentPosition(position => {\r\n         let setUserLocation = {\r\n             lat: position.coords.latitude,\r\n             long: position.coords.longitude\r\n          };\r\n         let newViewport = {\r\n            height: \"100vh\",\r\n            width: \"100vw\",\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude,\r\n            zoom: 10\r\n          };\r\n          this.setState({\r\n            viewport: newViewport,\r\n            userLocation: setUserLocation\r\n         });\r\n      });\r\n * \r\n * \r\n * \r\n * {Object.keys(this.state.userLocation).length !== 0 ? (\r\n              <Marker\r\n                latitude={this.state.userLocation.lat}\r\n                longitude={this.state.userLocation.long}\r\n              >\r\n               <img src=\"https://img.icons8.com/plasticine/100/000000/worldwide-location.png\"/>\r\n              </Marker>\r\n              ) : ( \r\n              <div>Empty</div>\r\n            )}\r\n * \r\n * \r\n * <div>\r\n              <h2>{this.state.selectedLink.community_board}</h2>\r\n              <p>{this.state.selectedLink.council_district}</p>\r\n            </div>\r\n *  {this.state.selectedLink ? console.log(this.state.selectedLink): console.log('not filled')}\r\n * {this.state.selectedLink ? (\r\n          <Popup\r\n            latitude={this.state.selectedLink.latitude}\r\n            longitude={this.state.selectedLink.longitude}\r\n            onClose={() => {\r\n              setSelectedLink(null);\r\n            }}\r\n          >\r\n            <div>\r\n              <h2>{this.state.selectedLink.community_board}</h2>\r\n              <p>{this.state.selectedLink.council_district}</p>\r\n            </div>\r\n          </Popup>\r\n        ) : null}\r\n * \r\n * \r\n * \r\n * \r\n *  {my_data.map(park => (\r\n          console.log(park.latitude + park.longitude)\r\n        ))}\r\n \r\n       {this.props.links.map(park => (\r\n          <Marker\r\n            key = {park.cb_link_id}\r\n            latitude={parseFloat(park.latitude)}\r\n            longitude={parseFloat(park.longitude)}\r\n          >\r\n            <button \r\n             className=\"marker_btt\"\r\n             >\r\n                <img width={10} height={10} src=\"https://img.icons8.com/android/24/000000/computer.png\" alt = \"linknyc\"/>\r\n            </button>\r\n          </Marker>\r\n        ))}\r\n \r\n \r\n\r\nconst Map = (props) => {\r\n  return (\r\n     \r\n    <div>\r\n      <ReactMapGL\r\n        {...props.viewport}\r\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n        onViewportChange={(viewport) => this.setState({viewport})}\r\n      >\r\n\r\n       \r\n        </ReactMapGL>\r\n    </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Map;\r\n\r\n\r\n\r\n\r\n        */\r\n\r\n\r\n\r\n\r\n\r\n ","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Map from './components/Map';\n//import Modal from './components/Modal'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Map/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}