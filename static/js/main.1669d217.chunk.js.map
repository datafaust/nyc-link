{"version":3,"sources":["components/Leaf.js","components/Match.js","components/Search.js","components/InfoBox.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["leaf","props","setUserLocation","console","log","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","setState","zoom","userLocation","center","setSelectedLink","e","selectedLink","showInfo","handleInputChange","event","preventDefault","target","value","length","searchInput","updateMatches","showMatches","matches","handleSubmit","displayMatches","findMatches","wordToMatch","my_obj","filter","place","regex","RegExp","street_address","match","newStateMatches","state","links","map","alertClicked","address","arr","eval","newViewport","height","width","newPosition","searchLink","markerClick","feature","parseFloat","viewport","fetch","then","res","json","markers","this","link","onClick","bind","community_board","council_district","attribution","url","Object","keys","src","alt","myValue","style","marginTop","Component","ListGroup","Item","className","action","toLowerCase","float","display","Search","borderRadius","padding","marginLeft","placeholder","onChange","defaultActiveKey","Match","App","Leaf","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1669d217.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n//import ReactMapGL, { Marker, Popup }  from 'react-map-gl';\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\r\n//import './Map.css'\r\nimport InfoBox from './InfoBox';\r\nimport { Button } from 'react-bootstrap';\r\nimport Search from './Search';\r\n//import Match from './Match';\r\nimport Modal from './Modal';\r\n\r\n//import classes from './mapbox-gl.css'\r\n//const my_data = require('../data/test.json');\r\n\r\nclass leaf extends Component {\r\n\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewport: {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        latitude: 40.7484,\r\n        longitude: -73.9755,\r\n        zoom: 10\r\n      },\r\n      latitude: 40.7484,\r\n      longitude: -73.9755,\r\n      position: [40.7484,-73.9755],\r\n      center: [40.7484,-73.9755],\r\n      zoom:10,\r\n      links: [],\r\n      selectedLink:null,\r\n      userLocation: {},\r\n      searchInput: \"\",\r\n      showMatches: false,\r\n      matches: [],\r\n      searchLink: [],\r\n      showInfo: false\r\n    };\r\n  }\r\n  \r\n\r\n  componentDidMount() {\r\n    fetch('https://data.cityofnewyork.us/resource/s4kf-3yrf.json')\r\n      .then(res=> res.json())\r\n      .then(res=> \r\n          //console.log(json)\r\n          this.setState({links:res})\r\n      );\r\n  }\r\n\r\n  setUserLocation = () => {\r\n    console.log(\"attempting to get user location ...\")\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n      \r\n      let setUserLocation = [position.coords.latitude, position.coords.longitude];\r\n      console.log(setUserLocation);\r\n      \r\n      let newViewport = {\r\n         height: \"100vh\",\r\n         width: \"100vw\",\r\n         latitude: position.coords.latitude,\r\n         longitude: position.coords.longitude,\r\n         zoom: 14\r\n       };\r\n       this.setState({\r\n         zoom: 14,\r\n         userLocation: setUserLocation,\r\n         center: setUserLocation\r\n      });\r\n   });\r\n  }\r\n  \r\n  //function to select the link for the popup\r\n      setSelectedLink = (e) => {\r\n        //console.log('clicked')\r\n        this.setState({selectedLink:e, showInfo:true})\r\n      }\r\n  \r\n      //****************child functions */\r\n  \r\n      handleInputChange = (event) => {\r\n        event.preventDefault()\r\n        console.log(event.target.value)\r\n        if (event.target.value.length === 0) {\r\n          this.setState({searchInput: \"\", showMatches: false, matches: [] })\r\n          return\r\n      }\r\n          this.setState({searchInput: event.target.value })\r\n          this.updateMatches()  \r\n      }\r\n  \r\n      handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        this.displayMatches();\r\n      }\r\n  \r\n      findMatches = (wordToMatch, my_obj) => {\r\n          return my_obj.filter(place => {\r\n          // here we need to figure out the matches\r\n          const regex = new RegExp(wordToMatch, 'gi');\r\n          //console.log(place.street_address.match(regex))\r\n          return place.street_address.match(regex)\r\n        });\r\n      }\r\n  \r\n      updateMatches =() => {\r\n        const matchArray = this.findMatches(this.state.searchInput, this.state.links);\r\n        const newStateMatches = matchArray.map(place => {\r\n          //console.log(place.street_address);\r\n          return place \r\n        });\r\n        this.setState({matches:newStateMatches})\r\n        \r\n      }\r\n  \r\n      alertClicked = address => {\r\n        let arr = eval(address.target.value);\r\n        console.log(arr[0])\r\n        let newViewport = {\r\n          height: \"100vh\",\r\n          width: \"100vw\",\r\n          latitude: arr[0],\r\n          longitude: arr[1],\r\n          zoom: 14\r\n        }\r\n        const newPosition = [arr[0],arr[1]]\r\n        this.setState({searchLink: address,\r\n                       center: newPosition,\r\n                       zoom: 14,\r\n                       matches: []});\r\n      }\r\n\r\n      markerClick = (feature) => {\r\n        console.log(parseFloat(feature.latitude))\r\n        //feature.preventDefault();\r\n        this.setState({\r\n          center: [parseFloat(feature.latitude), parseFloat(feature.longitude)],\r\n          zoom: [14],\r\n          selectedLink:feature\r\n        });\r\n      };\r\n  \r\n\r\n\r\n  render() {\r\n    \r\n    const markers = this.state.links.map((link) =>\r\n    <Marker \r\n      position={[parseFloat(link.latitude), parseFloat(link.longitude)]}\r\n      onClick={this.markerClick.bind(this,link)}>\r\n      <Popup>\r\n        <span>\r\n              <p>{link.street_address}</p>\r\n              <p>{link.community_board}</p>\r\n              <p>{link.council_district}</p>\r\n              <p>{link.latitude}</p>\r\n              <p>{link.longitude}</p>\r\n        </span>\r\n      </Popup>\r\n    </Marker>\r\n          );\r\n\r\n    //render matches to search bar \r\n    return (\r\n\r\n      <div>\r\n        <Map center={this.state.center} zoom={this.state.zoom}>\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\r\n        />\r\n        {markers}\r\n        {Object.keys(this.state.userLocation).length !== 0 ? (\r\n              <Marker\r\n                position={this.state.userLocation}\r\n              >\r\n               <img width={35} height={35}  src=\"https://img.icons8.com/plasticine/100/000000/worldwide-location.png\" alt = \"user_location\"/>\r\n              </Marker>\r\n              ) : ( \r\n              <div></div>\r\n            )}\r\n      </Map>\r\n\r\n      <Search \r\n        handleInputChange = {this.handleInputChange.bind(this)}\r\n        matches = {this.state.matches}\r\n        showMatches = {this.state.showMatches}\r\n        myValue= {this.state.searchInput}\r\n        alertClicked = {this.alertClicked}\r\n        />\r\n        <Button   \r\n           style={{marginTop: \"15%\"}} \r\n           onClick={this.setUserLocation}>\r\n          <img src=\"https://img.icons8.com/material-outlined/24/000000/location-off.png\" alt = \"location\"/>\r\n        </Button> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default leaf;\r\n","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\n\nconst match = ({ alertClicked, address, longitude, latitude }) => {\n\n\n    const MatchStyles = {\n        height: \"10%\"\n    }\n\n    const ImgStyles = {\n        float: \"right\",\n        display: \"inline\",\n        marginTop:\"-11%\",\n        height: \"6%\",\n        width: \"6%\"\n    }\n\n    const ImgStylesLoc = {\n        float: \"left\",\n        display: \"inline\",\n        marginTop:\"-11%\",\n        height: \"6%\",\n        width: \"6%\"\n    }\n\n    const latLon = [\n        {longitude: `${longitude}`},\n        {latitude: `${latitude}`}\n    ]\n    \nreturn (\n    <div>\n    <ListGroup.Item\n        style={MatchStyles} \n        className=\"Matches\"\n        action \n        value={`[${latitude}, ${longitude}]`}\n        // function expressions could cause this to rerender unnecessarily.\n        onClick={(address) => alertClicked(address)}> \n          {`${address.toLowerCase()}`}\n          <img \n            style={ImgStyles}\n            src=\"https://img.icons8.com/ios-glyphs/32/000000/up-left-arrow.png\" alt = \"arrow\">\n          </img>\n          <img\n            style={ImgStylesLoc} \n            src=\"https://img.icons8.com/material/24/000000/worldwide-location--v1.png\" alt= \"userloc\"> \n          </img>\n    </ListGroup.Item>\n    </div>\n)\n}\n\nexport default match;\n","import React from 'react';\nimport {ListGroup, Form} from 'react-bootstrap';\nimport Match from './Match'\n\nconst Search = ( props ) => {\n\n    const SearchStyles = {\n        position: \"absolute\",\n        width: \"90%\",\n        borderRadius: \"25px\",\n        padding: \"2%\",\n        marginLeft: \"-45%\",\n        marginTop: \"5%\"\n    }\n\n    const MatchStyles = {\n        marginTop:\"40%\"\n    }\n\n\n      return (\n        \n        <div>\n        <div>\n            <input \n                style={SearchStyles}\n                placeholder=\"Search for a Link Near you...\" \n                onChange = {props.handleInputChange} \n                value = {props.myValue}\n            />\n        </div>    \n        <div>\n            <li defaultActiveKey={props.showMatches}>\n              {\n                props.matches.map(match => {\n                  return <Match \n                            longitude={match.longitude}\n                            latitude={match.latitude} \n                            address={match.street_address} \n                            handleInputChange={props.handleInputChange}\n                            alertClicked = {props.alertClicked}\n                            showMatches = {props.showMatches}\n                            />\n                })\n              }\n            </li>\n            \n        </div>\n        </div>\n    );\n};\n\nexport default Search;\n\n\n/**\n * \n * <Form style = {{width: \"75%\"}} onSubmit = {this.handleSubmit}>\n            <Form.Group controlId=\"formSearch\">\n                <Form.Control type=\"text\" name = \"my_search\" placeholder=\"Search for a Link Near you...\" onChange = {this.handleInputChange} />\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\">\n                Search\n                </Button>\n            </Form>\n */","import React from 'react';\r\nimport { Accordion, Card, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst InfoBox = ( props ) => {\r\n\r\n    const Styles = {\r\n        //147 recommended marginTop: \"147%\",\r\n        marginTop: \"115%\",\r\n        BackgroundColor: \"white\"\r\n\r\n        //transform: \"rotate(180deg)\"\r\n    }\r\n\r\n    const TextStyles ={\r\n        \"text-align\": \"left\"\r\n    }\r\n\r\n    return (\r\n        <div style={Styles}>\r\n        <Accordion defaultActiveKey=\"0\">\r\n            <Card>\r\n            <Card.Header >\r\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                </Accordion.Toggle>\r\n            </Card.Header>\r\n            <Accordion.Collapse eventKey=\"0\" >\r\n                <Card.Body>\r\n                <div>\r\n                    <div>{`${props.link_id.toLowerCase()}`}</div>\r\n                    <div>{`4.5 Stars`}</div>\r\n                    <div>{`Link Address: ${props.sa.toLowerCase()}`}</div>\r\n                    <div>{`Community Board: ${props.cb}`}</div>\r\n                </div>\r\n                </Card.Body>\r\n            </Accordion.Collapse>\r\n            </Card>    \r\n        </Accordion>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default InfoBox;\r\n\r\n\r\n//add a click function in your info box\r\n\r\n// and then in MAp when a button in a map is clicked invoke that function\r\n","import React, { Component } from 'react';\r\nimport {Button, Modal } from 'react-bootstrap';\r\n\r\nclass popUp extends Component {\r\n\r\n  state = { show: false };\r\n\r\n  render() {\r\n\r\n    const handleShow = () => {\r\n      console.log('attempting to show modal')\r\n      this.setState({ show: true });\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      this.setState({ show: false });\r\n    };\r\n\r\n    const Styles = {\r\n        display:\"block\",\r\n        backgroundColor:\"\t#6495ED\",\r\n        borderRadius: \"40%\",\r\n        borderWidth: \"thin\",\r\n        borderColor: \"white\",\r\n        border: \"1px solid\",\r\n        padding: \"10px\",\r\n        boxShadow: \"1px 1px 1px #888888\"\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Button\r\n          style={Styles} \r\n          variant=\"primary\" \r\n          onClick={handleShow}\r\n          >\r\n          <img src=\"https://img.icons8.com/android/24/000000/plus.png\" alt=\"buttons\"></img>\r\n        </Button>\r\n\r\n      <Modal show={this.state.show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>NYC-Link</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div>\r\n            NYC-Link was built to help you find linkNYC stations near you.\r\n            Use the map interface to search for a location near you.\r\n          </div>\r\n          <br></br>\r\n           <div>\r\n            <b>Coming soon:</b> NYC-Link \r\n            allows you to route to the nearest station as well. More features \r\n            coming soon.\r\n           </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>  \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default popUp;\r\n\r\n/**\r\n * <Modal show={false} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal heading</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleClose}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n * \r\n */","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Leaf from './components/Leaf';\n//import Modal from './components/Modal'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Leaf/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}